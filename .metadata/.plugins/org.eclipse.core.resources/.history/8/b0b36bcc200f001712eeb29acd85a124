package fabulousoft.rpgtools.fragments;

import fabulousoft.rpgtools.R;
import android.app.Fragment;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.RectF;
import android.os.Bundle;
import android.text.DynamicLayout;
import android.text.Layout;
import android.text.StaticLayout;
import android.text.TextPaint;
import android.util.AttributeSet;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;



public class ProphecyView extends LinearLayout {
	
	
	String			text		= "Test it good";
	TextPaint		textPaint;
	DynamicLayout	textLayout;
	
	String			subText		= "Noun";
	TextPaint		subTextPaint;
	/* Use Static Layout for text that won't change. Use dynamic for changing text. */
	StaticLayout	subTextLayout;
	Paint			subTextBGPaint;
	
//	Paint			textBGColor;
	
	
	
	RectF			rectSubText	= new RectF();
	
	
	private int		textHeight;
	private int		textWidth;
	
	
	private float	density;
	private int		textPadding;
	private int	centered;
	
	
	public ProphecyView(Context context) {
	
		this(context, null);
		
	}
	
	
	public ProphecyView(Context context, AttributeSet attrs) {
	
		this(context, attrs, 0);
	}
	
	
	public ProphecyView(Context context, AttributeSet attrs, int defStyleAttr) {
	
		super(context, attrs, defStyleAttr);
		
		initPaints();
	}
	
	
	private void initPaints() {
	
		textPaint = new TextPaint();
		textPaint.setAntiAlias(true);
		textPaint.setTextSize(20 * getResources().getDisplayMetrics().density);
		textPaint.setColor(0xFF000000);
		
		textWidth = (int) textPaint.measureText(text);
		textLayout = new DynamicLayout(text, textPaint, textWidth, Layout.Alignment.ALIGN_NORMAL, 1, 0, false);
		
		subTextBGPaint = new Paint(Paint.ANTI_ALIAS_FLAG);
		subTextBGPaint.setStyle(Paint.Style.FILL);
		subTextBGPaint.setColor(Color.YELLOW);
		
		subTextPaint = new TextPaint();
		subTextPaint.setAntiAlias(true);
		subTextPaint.setTextSize(16 * getResources().getDisplayMetrics().density);
		subTextPaint.setColor(0xFF000000);
		
		int subTextwidth = (int) subTextPaint.measureText(subText);
		subTextLayout = new StaticLayout(subText, subTextPaint, subTextwidth, Layout.Alignment.ALIGN_NORMAL, 1, 0, false);
		
		
		density = getResources().getDisplayMetrics().density;
		textPadding = (int) (2 / density);
		
		
		setWillNotDraw(false);
	}
	
	
	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
	
		// determine the width
		int width;
		int widthMode = MeasureSpec.getMode(widthMeasureSpec);
		int widthRequirement = MeasureSpec.getSize(widthMeasureSpec);
		if (widthMode == MeasureSpec.EXACTLY) {
			width = widthRequirement;
		} else {
			width = subTextLayout.getWidth() + getPaddingLeft() + getPaddingRight();
			if (widthMode == MeasureSpec.AT_MOST) {
				if (width > widthRequirement) {
					width = widthRequirement;
					// too long for a single line so relayout as multiline
					subTextLayout = new StaticLayout(subText, subTextPaint, width,
						Layout.Alignment.ALIGN_CENTER, 1.0f, 0, false);
				}
			}
		}
		
		// determine the height
		int height;
		int heightMode = MeasureSpec.getMode(heightMeasureSpec);
		int heightRequirement = MeasureSpec.getSize(heightMeasureSpec);
		if (heightMode == MeasureSpec.EXACTLY) {
			height = heightRequirement;
		} else {
			height = subTextLayout.getHeight() + getPaddingTop() + getPaddingBottom();
			if (heightMode == MeasureSpec.AT_MOST) {
				height = Math.min(height, heightRequirement);
			}
		}
		
		textWidth = (int) textPaint.measureText(text);
		textHeight = textLayout.getHeight();
		
		centered = (int) ((textWidth - subTextPaint.measureText(subText) )/2);
		
		rectSubText.top = textHeight;
		rectSubText.bottom = textHeight + height + textPadding * 2;
		rectSubText.left = centered;
		rectSubText.right =  centered + subTextPaint.measureText(subText) + (textPadding + 6) * 2;
		
		
		setMeasuredDimension(width, textHeight + height + textPadding * 2);
	}
	
	
	
	
	@Override
	public void onDraw(Canvas canvas) {
	
		super.onDraw(canvas);
		
		
		textLayout.draw(canvas);
		
		canvas.drawRoundRect(rectSubText, 20, 20, subTextBGPaint);
		canvas.translate(centered + textPadding + 6, textHeight + textPadding);
		subTextLayout.draw(canvas);
		canvas.restore();
	}
}

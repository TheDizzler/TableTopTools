package Fabulousoft.rpgtools;

import java.io.BufferedReader;

import java.io.FileInputStream;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import java.util.ArrayList;
import java.util.Random;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ArrayAdapter;
import android.widget.CheckBox;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;


class Noun {
	
	String	single;
	String	plural;
	
	
	public Noun(String wordString) {
	
		String[] words = wordString.split("/");
		single = words[0];
		if (words.length > 1)
			plural = words[1];
		else
			plural = single + "s";
	}
}

class Verb {
	
	String	normal;
	String	special;
	
	
	public Verb(String wordString) {
	
		normal = wordString + "s";
		special = wordString;
		
	}
	
}



class Prophecy {
	
	/** Full example:
	 * 		(CAUSE)		[When] the [gray] [wizard] of [merry] [sadness] [comes],
	 * 					 conj		adj		noun		adj		noun	 verb
	 * 		(RESULT)	*/
	private String				fullProphecy;
	
	
	
	private String				conjunction;
	private String				optPrimaryAdjective;
	private Noun				primaryNoun;
	private String				optSecondaryAdjective;
	private Noun				optSecondaryNoun;
	private Verb				primaryVerb;
	
	
	private ArrayList<String>	conjunctionList			= new ArrayList<String>();
	private ArrayList<String>	conjunctionSpecialList	= new ArrayList<String>();
	private ArrayList<Noun>		nounCommonList			= new ArrayList<Noun>();
	private ArrayList<Noun>		nounProperList			= new ArrayList<Noun>();
	private ArrayList<Verb>		verbList				= new ArrayList<Verb>();
	private ArrayList<String>	adjectiveList			= new ArrayList<String>();
	
	
	
	TextView					propheticText;
	Spinner						spinnerConj;
	CheckBox					checkBoxConjRand;
	ToggleButton				toggleBtnPrimaryAdj;
	ToggleButton				toggleBtnPrimaryNounPlural;
	
	
	public Prophecy(Activity activity) {
	
		try {
			
			InputStream is = activity.getAssets().open("WordList.xml");
			Document xmlDoc = DocumentBuilderFactory.newInstance()
				.newDocumentBuilder().parse(is);
			
			is.close();
			
			Element rootNode = xmlDoc.getDocumentElement();
			rootNode.normalize();
			
			Element conjunctionsNode = (Element) rootNode.getElementsByTagName("conjunctions").item(0);
			
			Element normalNode = (Element) conjunctionsNode.getElementsByTagName("normal").item(0);
			String newWords = normalNode.getTextContent().trim();
			for (String word : newWords.split("\\s+")) {
				conjunctionList.add(word);
			}
			
			Element specialConjNode = (Element) conjunctionsNode
				.getElementsByTagName("special").item(0);
			newWords = specialConjNode.getTextContent().trim();
			for (String word : newWords.split("\\s+")) {
				conjunctionSpecialList.add(word);
			}
			
			Element nounsNode = (Element) rootNode.getElementsByTagName("nouns").item(0);
			Element commonNounNode = (Element) nounsNode.getElementsByTagName("common").item(0);
			newWords = commonNounNode.getTextContent().trim();
			for (String word : newWords.split("\\s+")) {
				nounCommonList.add(new Noun(word));
			}
			
			Element properNounNode = (Element) nounsNode.getElementsByTagName("proper").item(0);
			newWords = properNounNode.getTextContent().trim();
			for (String word : newWords.split("\\s+")) {
				Log.w("Hey P", word);
				nounProperList.add(new Noun(word));
			}
			
			
			Element verbsNode = (Element) rootNode.getElementsByTagName("verbs").item(0);
			newWords = verbsNode.getTextContent().trim();
			for (String word : newWords.split("\\s+")) {
				verbList.add(new Verb(word));
			}
			
			
			Element adjNode = (Element) rootNode.getElementsByTagName("adjectives").item(0);
			newWords = adjNode.getTextContent().trim();
			for (String word : newWords.split("\\s+")) {
				adjectiveList.add(word);
			}
			
		} catch (IOException e) {
			e.printStackTrace();
			Toast.makeText(activity, e.getMessage(), Toast.LENGTH_LONG).show();
		} catch (SAXException e) {
			e.printStackTrace();
			Toast.makeText(activity, e.getMessage(), Toast.LENGTH_LONG).show();
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
			Toast.makeText(activity, e.getMessage(), Toast.LENGTH_LONG).show();
		}
		
		propheticText = (TextView) activity.findViewById(R.id.textview_prophetic);
		spinnerConj = (Spinner) activity.findViewById(R.id.spinner_Conjunctions);
		checkBoxConjRand = (CheckBox) activity.findViewById(R.id.checkBox_conjRand);
		toggleBtnPrimaryAdj = (ToggleButton) activity.findViewById(R.id.toggleBtn_primaryAdjective);
		toggleBtnPrimaryAdj.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View arg0) {

				reconstructProphecy();
			}	
		});
		toggleBtnPrimaryNounPlural = (ToggleButton) activity.findViewById(R.id.toggleBtn_primaryNounPlural);
		
		
		ArrayAdapter<String> conjAdap = new ArrayAdapter<String>(activity,
			android.R.layout.simple_spinner_dropdown_item, conjunctionList);
		spinnerConj.setAdapter(conjAdap);
		
	}
	
	
	public void getFullProphecy() {
	
		Random rand = new Random();
		if (checkBoxConjRand.isChecked())
			conjunction = conjunctionList.get(rand.nextInt(conjunctionList.size()));
		else
			conjunction = (String) spinnerConj.getSelectedItem();
		
		fullProphecy = firstCharToUpper(conjunction);
		fullProphecy += " the ";
		
		
		if (toggleBtnPrimaryAdj.isChecked()) {
			optPrimaryAdjective = adjectiveList.get(rand.nextInt(adjectiveList.size()));
			fullProphecy += optPrimaryAdjective + " ";
		}
		
		primaryNoun = nounCommonList.get(rand.nextInt(nounCommonList.size()));
		
		if (toggleBtnPrimaryNounPlural.isChecked())
			fullProphecy += primaryNoun.plural;
		else
			fullProphecy += primaryNoun.single;
		
		propheticText.setText(fullProphecy);
	}
	
	
	public void reconstructProphecy() {
	
		fullProphecy = firstCharToUpper(conjunction);
		fullProphecy += " the ";
		
		propheticText.setText(fullProphecy);
		if (toggleBtnPrimaryAdj.isChecked()) {
			if (/*optPrimaryAdjective == null || */ optPrimaryAdjective.isEmpty())
			fullProphecy += optPrimaryAdjective + " ";
		}
		
		if (toggleBtnPrimaryNounPlural.isChecked())
			fullProphecy += primaryNoun.plural;
		else
			fullProphecy += primaryNoun.single;
		
		propheticText.setText(fullProphecy);
	};
	
	
	public static String firstCharToUpper(String change) {
	
		return change.substring(0, 1).toUpperCase() + change.substring(1);
	}
	
	
}

public class ProphecyActivity extends Activity {
	
	
	Prophecy	prophecy;
	
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
	
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_prophecy);
		
		prophecy = new Prophecy(this);
		
	}
	
	
	private void generateRandomProphecy() {
	
//		Random rand = new Random();
//		if (checkBoxConjRand.isChecked())
//			prophecy.setConjunction(conjunctionList.get(rand.nextInt(conjunctionList.size())));
//		else
//			prophecy.setConjunction((String) spinnerConj.getSelectedItem());
//		
//		if (toggleBtnPrimaryAdj.isChecked())
//			prophecy.setOptPrimaryAdjective(adjectiveList.get(rand.nextInt(adjectiveList.size())));
//		
//		prophecy.setPrimaryNoun(nounCommonList.get(rand.nextInt(nounCommonList.size())));
//		
//		
//		propheticText.setText(prophecy.getFullProphecy());
		
		prophecy.getFullProphecy();
	}
	
	
	public void generateProphecy(View v) {
	
		generateRandomProphecy();
	}
	
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
	
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.prophecy, menu);
		return true;
	}
	
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
	
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}
}
